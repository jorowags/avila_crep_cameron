nb_percentage <- sprintf("%.2f", prop.table(table(data$gender))["non-binary"] * 100, 2)
# Race/ethnicity
## Clean up variable
names(data)[names(data) == "Q004_02"] <- "race"
data$race <- gsub("AA/Caucasian","Multiracial", data$race)
data$race <- gsub("Hispanic/latino","Hispanic/Latinol", data$race)
data$race <- gsub("White/Caucasian ","White", data$race)
data$race <- gsub("White/Hispanic","Multiracial", data$race)
data$race <- gsub("African American","Black", data$race)
data$race <- gsub("African American ","Black", data$race)
data$race <- gsub("Black American ","Black", data$race)
data$race <- gsub("caucasian","White", data$race)
data$race <- gsub("Caucasian","White", data$race)
data$race <- gsub("Caucasian ","White", data$race)
data$race <- gsub("hispanic","Hispanic/Latino", data$race)
data$race <- gsub("Hispanic","Hispanic/Latino", data$race)
data$race <- gsub("Indian","Indian", data$race)
data$race <- gsub("Native Indian","Indigenous", data$race)
data$race <- gsub("white","White", data$race)
data$race <- gsub("white ","White", data$race)
table(data$race)
knitr::opts_chunk$set(echo = TRUE)
# To do list
# Install/load packages
# Import data
# Data processing
# Data analysis
packages = c("psych")
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
url <- "https://raw.githubusercontent.com/jorowags/avila_crep_cameron/main/avila_cameron_data.csv"
initial_data <- read.csv(url)
data <- initial_data
# rename variables
names(data)[names(data) == "Q004_03"] <- "age"
## XXX rename other variables
# remove participants who did not finish study
data <- subset(data, data$LASTPAGE > 85)
# remove minors
data <- subset(data, data$age > 17)
# remove cases with "test" in gender
data <- subset(data, !grepl("Test", age, ignore.case = TRUE))
# Initialize new variables
for (i in 1:40) {
new_var <- paste0("T", sprintf("%03d", i))
data[[new_var]] <- NA
}
# Populate the new variables with the choices
for (row in 1:nrow(data)) {
for (i in 1:40) {
# Get the trial column name and stimulus number
trial_col <- paste0("R001x", sprintf("%02d", i))
stimulus_num <- data[row, trial_col]
# Get the choice column name
choice_col <- paste0("C", sprintf("%03d", stimulus_num))
# Get the new variable name
new_var <- paste0("T", sprintf("%03d", i))
# Populate the new variable with the choice
data[row, new_var] <- data[row, choice_col]
}
}
names(data)[names(data) == "Q004_02"] <- "race"
table(data$race)
data$race <- gsub("AA/Caucasian","Multiracial", data$race)
table(data$race)
data$race <- gsub("Hispanic/latino","Hispanic", data$race)
table(data$race)
data$race <- gsub("White/Caucasian ","White", data$race)
table(data$race)
data$race <- gsub("White/Hispanic ","Multiracial", data$race)
table(data$race)
data$race <- gsub("White/Hispanic","Multiracial", data$race)
table(data$race)
data$race <- gsub("African American ", "Black", data$race)
table(data$race)
data$race <- gsub("Black American ", "Black", data$race)
table(data$race)
data$race <- gsub("African American", "Black", data$race)
table(data$race)
data$race <- gsub("Caucasian ", "White", data$race)
table(data$race)
data$race <- gsub("white ", "White", data$race)
table(data$race)
data$race <- gsub("caucasian", "White", data$race)
table(data$race)
data$race <- gsub("Caucasian", "White", data$race)
data$race <- gsub("Caucasian", "White", data$race)
table(data$race)
data$race <- gsub("white", "White", data$race)
table(data$race)
data$race <- gsub("hispanic", "Hispanic", data$race)
table(data$race)
data$race <- gsub("Indian ", "Indian", data$race)
table(data$race)
data$race <- gsub("Native Indian", "Indigenous", data$race)
data$race <- gsub("None ", "None Reported", data$race)
data$race <- gsub("Native Indian", "Indigenous", data$race)
table(data$race)
white_percentage <- sprintf("%.2f", prop.table(table(data$race))["White"] * 100, 2)
black_percentage <- sprintf("%.2f", prop.table(table(data$race))["Black"] * 100, 2)
hispanic_percentage <- sprintf("%.2f", prop.table(table(data$race))["Hispanic"] * 100, 2)
indian_percentage <- sprintf("%.2f", prop.table(table(data$race))["Indian"] * 100, 2)
indigenous_percentage <- sprintf("%.2f", prop.table(table(data$race))["Indigenous"] * 100, 2)
multiracial_percentage <- sprintf("%.2f", prop.table(table(data$race))["Multiracial"] * 100, 2)
none_percentage <- sprintf("%.2f", prop.table(table(data$race))["None Reported"] * 100, 2)
indigenous_percentage <- sprintf("%.2f", prop.table(table(data$race))["Indigenous"] * 100, 2)
indigenous_percentage
mean_choice <- data$mean_C <- rowMeans(data[, paste0("C", sprintf("%03d", 1:40))])
mean_choice <- data$mean_C <- rowMeans(data[, paste0("C", sprintf("%03d", 1:40))])-1
choice_index <- data$mean_C <- rowMeans(data[, paste0("C", sprintf("%03d", 1:40))])-1
mean_choice_index <- mean(data$choice_index)
choice_index <- data$mean_C <- rowMeans(data[, paste0("C", sprintf("%03d", 1:40))])-1
mean_choice_index <- mean(data$choice_index)
data$choice_index <- rowMeans(data[, paste0("C", sprintf("%03d", 1:40))]) - 1
# Calculate the overall mean of choice_index
mean_choice_index <- mean(data$choice_index, na.rm = TRUE)
names(data)[names(data) == "Q002_01"] <- "RedNASA_demanding"
names(data)[names(data) == "Q002_02"] <- "RedNASA_hard_work"
names(data)[names(data) == "Q002_03"] <- "RedNASA_aversion"
names(data)[names(data) == "Q004_02"] <- "RedNASA_efficacy"
### Add variables for "subscales"
data$RedNASA_effort <- (data$RedNASA_demanding+data$RedNASA_hard_work)/2
View(data)
names(data)[names(data) == "Q003_01"] <- "BlueNASA_demanding"
names(data)[names(data) == "Q003_02"] <- "BlueNASA_hard_work"
names(data)[names(data) == "Q003_03"] <- "BlueNASA_aversion"
names(data)[names(data) == "Q003_02"] <- "BlueNASA_efficacy"
### Add variables for "subscales"
data$BlueNASA_effort <- (data$BlueNASA_demanding+data$BlueNASA_hard_work)/2
# replace -9 (not answered) with "NA"
data <- data(lapply(data, function(x) replace(x, x == -9, NA)))
# rename variables
names(data)[names(data) == "Q004_03"] <- "age"
## XXX rename other variables
# remove participants who did not finish study
data <- subset(data, data$LASTPAGE > 85)
knitr::opts_chunk$set(echo = TRUE)
# To do list
# Install/load packages
# Import data
# Data processing
# Data analysis
packages = c("psych")
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
url <- "https://raw.githubusercontent.com/jorowags/avila_crep_cameron/main/avila_cameron_data.csv"
initial_data <- read.csv(url)
data <- initial_data
# replace -9 (not answered) with "NA"
data <- data(lapply(data, function(x) replace(x, x == -9, NA)))
# rename variables
names(data)[names(data) == "Q004_03"] <- "age"
## XXX rename other variables
# remove participants who did not finish study
data <- subset(data, data$LASTPAGE > 85)
url <- "https://raw.githubusercontent.com/jorowags/avila_crep_cameron/main/avila_cameron_data.csv"
initial_data <- read.csv(url)
data <- initial_data
data <- data(lapply(data, function(x) replace(x, x == -9, NA)))
data <- data.frame(lapply(data, function(x) replace(x, x == -9, NA)))
data <- initial_data
data <- initial_data
data <- data.frame(lapply(data, function(x) replace(x, x == -9, NA)))
View(initial_data)
knitr::opts_chunk$set(echo = TRUE)
# To do list
# Install/load packages
# Import data
# Data processing
# Data analysis
url <- "https://raw.githubusercontent.com/jorowags/avila_crep_cameron/main/avila_cameron_data.csv"
initial_data <- read.csv(url)
data <- initial_data
# rename variables
names(data)[names(data) == "Q004_03"] <- "age"
## XXX rename other variables
# remove participants who did not finish study
data <- subset(data, data$LASTPAGE > 85)
# remove minors
data <- subset(data, data$age > 17)
# remove cases with "test" in gender
data <- subset(data, !grepl("Test", age, ignore.case = TRUE))
# Initialize new variables
for (i in 1:40) {
new_var <- paste0("T", sprintf("%03d", i))
data[[new_var]] <- NA
}
# Populate the new variables with the choices
for (row in 1:nrow(data)) {
for (i in 1:40) {
# Get the trial column name and stimulus number
trial_col <- paste0("R001x", sprintf("%02d", i))
stimulus_num <- data[row, trial_col]
# Get the choice column name
choice_col <- paste0("C", sprintf("%03d", stimulus_num))
# Get the new variable name
new_var <- paste0("T", sprintf("%03d", i))
# Populate the new variable with the choice
data[row, new_var] <- data[row, choice_col]
}
}
# N
## Calculate number of cases in initial data
n_initial <- length(unique(initial_data$CASE[initial_data$CASE != "NANA"]))
n_final <- length(unique(data$CASE[data$CASE != "NANA"]))
n_exclusions <- as.numeric(n_initial) - as.numeric(n_final)
## Calculate number of cases in final data
# Age M and SD
## Clean up age variable
data$age <- gsub("\\D", "", data$age)
age_m <- sprintf("%.2f", mean(as.numeric(data$age)), 2)
age_sd <- sprintf("%.2f", sd(as.numeric(data$age)), 2)
# gender
## Clean up variable
names(data)[names(data) == "Q004_01"] <- "gender"
data$gender <- gsub("alpha male","male", data$gender)
data$gender <- gsub("I am a damn male","male", data$gender)
data$gender <- gsub("MALE","male", data$gender)
data$gender <- gsub("Male","male", data$gender)
data$gender <- gsub("Straight male","male", data$gender)
data$gender <- gsub("male ","male", data$gender)
data$gender <- gsub("Female","female", data$gender)
## Get gender percentages
female_percentage <- sprintf("%.2f", prop.table(table(data$gender))["female"] * 100, 2)
male_percentage <- sprintf("%.2f", prop.table(table(data$gender))["male"] * 100, 2)
nb_percentage <- sprintf("%.2f", prop.table(table(data$gender))["non-binary"] * 100, 2)
# Race/ethnicity
## Clean up variable
names(data)[names(data) == "Q004_02"] <- "race"
data$race <- gsub("AA/Caucasian","Multiracial", data$race)
data$race <- gsub("Hispanic/latino","Hispanic", data$race)
data$race <- gsub("White/Caucasian ","White", data$race)
data$race <- gsub("White/Hispanic","Multiracial", data$race)
data$race <- gsub("African American ", "Black", data$race)
data$race <- gsub("Black American ", "Black", data$race)
data$race <- gsub("African American", "Black", data$race)
data$race <- gsub("Caucasian ", "White", data$race)
data$race <- gsub("white ", "White", data$race)
data$race <- gsub("caucasian", "White", data$race)
data$race <- gsub("Caucasian", "White", data$race)
data$race <- gsub("white", "White", data$race)
data$race <- gsub("hispanic", "Hispanic", data$race)
data$race <- gsub("Indian ", "Indian", data$race)
data$race <- gsub("None ", "None Reported", data$race)
## Get race percentages
white_percentage <- sprintf("%.2f", prop.table(table(data$race))["White"] * 100, 2)
black_percentage <- sprintf("%.2f", prop.table(table(data$race))["Black"] * 100, 2)
hispanic_percentage <- sprintf("%.2f", prop.table(table(data$race))["Hispanic"] * 100, 2)
indian_percentage <- sprintf("%.2f", prop.table(table(data$race))["Indian"] * 100, 2)
indigenous_percentage <- sprintf("%.2f", prop.table(table(data$race))["Indigenous"] * 100, 2)
multiracial_percentage <- sprintf("%.2f", prop.table(table(data$race))["Multiracial"] * 100, 2)
none_percentage <- sprintf("%.2f", prop.table(table(data$race))["None Reported"] * 100, 2)
# Calculate and store the choice_index
data$choice_index <- rowMeans(data[, paste0("C", sprintf("%03d", 1:40))]) - 1
# Calculate the overall mean of choice_index
mean_choice_index <- mean(data$choice_index, na.rm = TRUE)
#calculate NASA
## RedNASA
### Rename variables
names(data)[names(data) == "Q002_01"] <- "RedNASA_demanding"
names(data)[names(data) == "Q002_02"] <- "RedNASA_hard_work"
names(data)[names(data) == "Q002_03"] <- "RedNASA_aversion"
names(data)[names(data) == "Q004_02"] <- "RedNASA_efficacy"
### Replace -9 with "NA"
data$RedNASA_demanding[data$RedNASA_demanding == "-9"] <- NA
data$RedNASA_hard_work[data$RedNASA_hard_work == "-9"] <- NA
data$RedNASA_aversion[data$RedNASA_aversion == "-9"] <- NA
data$RedNASA_efficacy[data$RedNASA_efficacy == "-9"] <- NA
knitr::opts_chunk$set(echo = TRUE)
# To do list
# Install/load packages
# Import data
# Data processing
# Data analysis
url <- "https://raw.githubusercontent.com/jorowags/avila_crep_cameron/main/avila_cameron_data.csv"
initial_data <- read.csv(url)
data <- initial_data
# rename variables
names(data)[names(data) == "Q004_03"] <- "age"
## XXX rename other variables
# remove participants who did not finish study
data <- subset(data, data$LASTPAGE > 85)
# remove minors
data <- subset(data, data$age > 17)
# remove cases with "test" in gender
data <- subset(data, !grepl("Test", age, ignore.case = TRUE))
# Initialize new variables
for (i in 1:40) {
new_var <- paste0("T", sprintf("%03d", i))
data[[new_var]] <- NA
}
# Populate the new variables with the choices
for (row in 1:nrow(data)) {
for (i in 1:40) {
# Get the trial column name and stimulus number
trial_col <- paste0("R001x", sprintf("%02d", i))
stimulus_num <- data[row, trial_col]
# Get the choice column name
choice_col <- paste0("C", sprintf("%03d", stimulus_num))
# Get the new variable name
new_var <- paste0("T", sprintf("%03d", i))
# Populate the new variable with the choice
data[row, new_var] <- data[row, choice_col]
}
}
# N
## Calculate number of cases in initial data
n_initial <- length(unique(initial_data$CASE[initial_data$CASE != "NANA"]))
n_final <- length(unique(data$CASE[data$CASE != "NANA"]))
n_exclusions <- as.numeric(n_initial) - as.numeric(n_final)
## Calculate number of cases in final data
# Age M and SD
## Clean up age variable
data$age <- gsub("\\D", "", data$age)
age_m <- sprintf("%.2f", mean(as.numeric(data$age)), 2)
age_sd <- sprintf("%.2f", sd(as.numeric(data$age)), 2)
# gender
## Clean up variable
names(data)[names(data) == "Q004_01"] <- "gender"
data$gender <- gsub("alpha male","male", data$gender)
data$gender <- gsub("I am a damn male","male", data$gender)
data$gender <- gsub("MALE","male", data$gender)
data$gender <- gsub("Male","male", data$gender)
data$gender <- gsub("Straight male","male", data$gender)
data$gender <- gsub("male ","male", data$gender)
data$gender <- gsub("Female","female", data$gender)
## Get gender percentages
female_percentage <- sprintf("%.2f", prop.table(table(data$gender))["female"] * 100, 2)
male_percentage <- sprintf("%.2f", prop.table(table(data$gender))["male"] * 100, 2)
nb_percentage <- sprintf("%.2f", prop.table(table(data$gender))["non-binary"] * 100, 2)
# Race/ethnicity
## Clean up variable
names(data)[names(data) == "Q004_02"] <- "race"
data$race <- gsub("AA/Caucasian","Multiracial", data$race)
data$race <- gsub("Hispanic/latino","Hispanic", data$race)
data$race <- gsub("White/Caucasian ","White", data$race)
data$race <- gsub("White/Hispanic","Multiracial", data$race)
data$race <- gsub("African American ", "Black", data$race)
data$race <- gsub("Black American ", "Black", data$race)
data$race <- gsub("African American", "Black", data$race)
data$race <- gsub("Caucasian ", "White", data$race)
data$race <- gsub("white ", "White", data$race)
data$race <- gsub("caucasian", "White", data$race)
data$race <- gsub("Caucasian", "White", data$race)
data$race <- gsub("white", "White", data$race)
data$race <- gsub("hispanic", "Hispanic", data$race)
data$race <- gsub("Indian ", "Indian", data$race)
data$race <- gsub("None ", "None Reported", data$race)
## Get race percentages
white_percentage <- sprintf("%.2f", prop.table(table(data$race))["White"] * 100, 2)
black_percentage <- sprintf("%.2f", prop.table(table(data$race))["Black"] * 100, 2)
hispanic_percentage <- sprintf("%.2f", prop.table(table(data$race))["Hispanic"] * 100, 2)
indian_percentage <- sprintf("%.2f", prop.table(table(data$race))["Indian"] * 100, 2)
indigenous_percentage <- sprintf("%.2f", prop.table(table(data$race))["Indigenous"] * 100, 2)
multiracial_percentage <- sprintf("%.2f", prop.table(table(data$race))["Multiracial"] * 100, 2)
none_percentage <- sprintf("%.2f", prop.table(table(data$race))["None Reported"] * 100, 2)
# take mean of deck choices – numbers closer to 2 indicate more “Feel”, closer to 1 indicate more “Describe”, subtract 1 to get numbers similar to theirs
# Calculate and store the choice_index
data$choice_index <- rowMeans(data[, paste0("C", sprintf("%03d", 1:40))]) - 1
# Calculate the overall mean of choice_index
mean_choice_index <- mean(data$choice_index, na.rm = TRUE)
#calculate NASA
## RedNASA
### Rename variables
names(data)[names(data) == "Q002_01"] <- "RedNASA_demanding"
names(data)[names(data) == "Q002_02"] <- "RedNASA_hard_work"
names(data)[names(data) == "Q002_03"] <- "RedNASA_aversion"
names(data)[names(data) == "Q002_04"] <- "RedNASA_efficacy"
### Replace -9 with "NA"
data$RedNASA_demanding[data$RedNASA_demanding == "-9"] <- NA
data$RedNASA_hard_work[data$RedNASA_hard_work == "-9"] <- NA
data$RedNASA_aversion[data$RedNASA_aversion == "-9"] <- NA
data$RedNASA_efficacy[data$RedNASA_efficacy == "-9"] <- NA
### Add variables for "subscales"
data$RedNASA_effort <- (data$RedNASA_demanding+data$RedNASA_hard_work)/2
## BlueNASA
### Rename variables
names(data)[names(data) == "Q003_01"] <- "BlueNASA_demanding"
names(data)[names(data) == "Q003_02"] <- "BlueNASA_hard_work"
names(data)[names(data) == "Q003_03"] <- "BlueNASA_aversion"
names(data)[names(data) == "Q003_02"] <- "BlueNASA_efficacy"
### Add variables for "subscales"
data$BlueNASA_effort <- (data$BlueNASA_demanding+data$BlueNASA_hard_work)/2
# calculate MFI
#Tests:
#1.	One-sample t-test against .5 for deck selection (see #first row of above photo)
#2.	One-sample t-test: EffortDiff (empathy minus objective) #deck selection -> NASA effort, test against 0
#3.	Same as #2, but for Aversive
#4.	Same as #3, but for Efficacy
#5.	Correlation: deck selection and effodiff
#6.	Correlation: deck selection and affdiff
#7.	Correlation: deck selection and NASA effidiff
# Time course analysis -- see https://osf.io/w8czf
# N
## Calculate number of cases in initial data
n_initial <- length(unique(initial_data$CASE[initial_data$CASE != "NANA"]))
n_final <- length(unique(data$CASE[data$CASE != "NANA"]))
n_exclusions <- as.numeric(n_initial) - as.numeric(n_final)
## Calculate number of cases in final data
# Age M and SD
## Clean up age variable
data$age <- gsub("\\D", "", data$age)
age_m <- sprintf("%.2f", mean(as.numeric(data$age)), 2)
age_sd <- sprintf("%.2f", sd(as.numeric(data$age)), 2)
# gender
## Clean up variable
names(data)[names(data) == "Q004_01"] <- "gender"
data$gender <- gsub("alpha male","male", data$gender)
data$gender <- gsub("I am a damn male","male", data$gender)
data$gender <- gsub("MALE","male", data$gender)
data$gender <- gsub("Male","male", data$gender)
data$gender <- gsub("Straight male","male", data$gender)
data$gender <- gsub("male ","male", data$gender)
data$gender <- gsub("Female","female", data$gender)
## Get gender percentages
female_percentage <- sprintf("%.2f", prop.table(table(data$gender))["female"] * 100, 2)
male_percentage <- sprintf("%.2f", prop.table(table(data$gender))["male"] * 100, 2)
nb_percentage <- sprintf("%.2f", prop.table(table(data$gender))["non-binary"] * 100, 2)
# Race/ethnicity
## Clean up variable
names(data)[names(data) == "Q004_02"] <- "race"
data$race <- gsub("AA/Caucasian","Multiracial", data$race)
data$race <- gsub("Hispanic/latino","Hispanic", data$race)
data$race <- gsub("White/Caucasian ","White", data$race)
data$race <- gsub("White/Hispanic","Multiracial", data$race)
data$race <- gsub("African American ", "Black", data$race)
data$race <- gsub("Black American ", "Black", data$race)
data$race <- gsub("African American", "Black", data$race)
data$race <- gsub("Caucasian ", "White", data$race)
data$race <- gsub("white ", "White", data$race)
data$race <- gsub("caucasian", "White", data$race)
data$race <- gsub("Caucasian", "White", data$race)
data$race <- gsub("white", "White", data$race)
data$race <- gsub("hispanic", "Hispanic", data$race)
data$race <- gsub("Indian ", "Indian", data$race)
data$race <- gsub("None ", "None Reported", data$race)
## Get race percentages
white_percentage <- sprintf("%.2f", prop.table(table(data$race))["White"] * 100, 2)
black_percentage <- sprintf("%.2f", prop.table(table(data$race))["Black"] * 100, 2)
hispanic_percentage <- sprintf("%.2f", prop.table(table(data$race))["Hispanic"] * 100, 2)
indian_percentage <- sprintf("%.2f", prop.table(table(data$race))["Indian"] * 100, 2)
indigenous_percentage <- sprintf("%.2f", prop.table(table(data$race))["Indigenous"] * 100, 2)
multiracial_percentage <- sprintf("%.2f", prop.table(table(data$race))["Multiracial"] * 100, 2)
none_percentage <- sprintf("%.2f", prop.table(table(data$race))["None Reported"] * 100, 2)
knitr::opts_chunk$set(echo = TRUE)
# To do list
# Install/load packages
# Import data
# Data processing
# Data analysis
url <- "https://raw.githubusercontent.com/jorowags/avila_crep_cameron/main/avila_cameron_data.csv"
initial_data <- read.csv(url)
data <- initial_data
# rename variables
names(data)[names(data) == "Q004_03"] <- "age"
## XXX rename other variables
# remove participants who did not finish study
data <- subset(data, data$LASTPAGE > 85)
# remove minors
data <- subset(data, data$age > 17)
# remove cases with "test" in gender
data <- subset(data, !grepl("Test", age, ignore.case = TRUE))
# Initialize new variables
for (i in 1:40) {
new_var <- paste0("T", sprintf("%03d", i))
data[[new_var]] <- NA
}
# Populate the new variables with the choices
for (row in 1:nrow(data)) {
for (i in 1:40) {
# Get the trial column name and stimulus number
trial_col <- paste0("R001x", sprintf("%02d", i))
stimulus_num <- data[row, trial_col]
# Get the choice column name
choice_col <- paste0("C", sprintf("%03d", stimulus_num))
# Get the new variable name
new_var <- paste0("T", sprintf("%03d", i))
# Populate the new variable with the choice
data[row, new_var] <- data[row, choice_col]
}
}
knitr::opts_chunk$set(echo = TRUE)
# To do list
# Install/load packages
# Import data
# Data processing
# Data analysis
url <- "https://raw.githubusercontent.com/jorowags/avila_crep_cameron/main/avila_cameron_data.csv"
initial_data <- read.csv(url)
data <- initial_data
url <- "https://raw.githubusercontent.com/jorowags/avila_crep_cameron/main/avila_cameron_data.csv"
initial_data <- read.csv(url)
data <- initial_data
url <- "https://raw.githubusercontent.com/jorowags/avila_crep_cameron/main/avila_cameron_data.csv"
initial_data <- read.csv(url)
data <- initial_data
